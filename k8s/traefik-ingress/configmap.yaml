kind: ConfigMap
apiVersion: v1
metadata:
  name: traefik
  namespace: kube-system
data:
  traefik-config: |-
    defaultEntryPoints = ["http","https"]
    [entryPoints]
      [entryPoints.http]
      address = ":80"
        [entryPoints.http.redirect]
        entryPoint = "https"
      [entryPoints.https]
      address = ":443"
        [entryPoints.https.tls]
          [[entryPoints.https.tls.certificates]]
          CertFile = "/etc/traefik/tls.crt"
          KeyFile = "/etc/traefik/tls.key"
        # Enable ACME (Let's Encrypt): automatic SSL
        #
        # Optional
        #
        [acme]

        # Email address used for registration
        #
        # Required
        #
        email = "yanghu@parkingwang.com"

        # File or key used for certificates storage.
        # WARNING, if you use Traefik in Docker, you have 2 options:
        #  - create a file on your host and mount it as a volume
        #      storageFile = "acme.json"
        #      $ docker run -v "/my/host/acme.json:acme.json" traefik
        #  - mount the folder containing the file as a volume
        #      storageFile = "/etc/traefik/acme/acme.json"
        #      $ docker run -v "/my/host/acme:/etc/traefik/acme" traefik
        #
        # Required
        #
        storageFile = "parkingwang.json"

        # Entrypoint to proxy acme challenge to.
        # WARNING, must point to an entrypoint on port 443
        #
        # Required
        #
        entryPoint = "https"

        # Enable on demand certificate. This will request a certificate from Let's Encrypt during the first TLS handshake for a hostname that does not yet have a certificate.
        # WARNING, TLS handshakes will be slow when requesting a hostname certificate for the first time, this can leads to DoS attacks.
        # WARNING, Take note that Let's Encrypt have rate limiting: https://letsencrypt.org/docs/rate-limits
        #
        # Optional
        #
        #onDemand = true

        # Enable certificate generation on frontends Host rules. This will request a certificate from Let's Encrypt for each frontend with a Host rule.
        # For example, a rule Host:test1.traefik.io,test2.traefik.io will request a certificate with main domain test1.traefik.io and SAN test2.traefik.io.
        #
        # Optional
        #
        # OnHostRule = true

        # CA server to use
        # Uncomment the line to run on the staging let's encrypt server
        # Leave comment to go to prod
        #
        # Optional
        #
        caServer = "https://acme-staging.api.letsencrypt.org/directory"

        # Domains list
        # You can provide SANs (alternative domains) to each main domain
        # All domains must have A/AAAA records pointing to Traefik
        # WARNING, Take note that Let's Encrypt have rate limiting: https://letsencrypt.org/docs/rate-limits
        # Each domain & SANs will lead to a certificate request.
        #
         [[acme.domains]]
           main = "*.parkingwang.com"
           sans = ["dev.parkingwang.com", "*.parkingwang.com"]
        # [[acme.domains]]
        #   main = "local2.com"
        #   sans = ["test1.local2.com", "test2x.local2.com"]
        # [[acme.domains]]
        #   main = "local3.com"
        # [[acme.domains]]
        #   main = "local4.com"
        #[[acme.domains]]
        #   main = "local1.com"
        #   sans = ["test1.local1.com", "test2.local1.com"]
        #[[acme.domains]]
        #   main = "local3.com"
        #[[acme.domains]]
        #   main = "local4.com"



 
